/*
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.0.12 reported-davon
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lab5e.span;

import com.lab5e.ApiException;
import com.lab5e.span.model.CreateFirmwareRequest;
import com.lab5e.span.model.Firmware;
import com.lab5e.span.model.FirmwareUsageResponse;
import com.lab5e.span.model.ListFirmwareResponse;
import com.lab5e.span.model.RuntimeError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FotaApi
 */
@Ignore
public class FotaApiTest {

    private final FotaApi api = new FotaApi();

    
    /**
     * Clear FOTA error
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearFirmwareErrorTest() throws ApiException {
        String collectionId = null;
        String deviceId = null;
        Object response = api.clearFirmwareError(collectionId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Create firmware
     *
     * Create a new firmware image. This is also invoked by the custom HTTP uploader if the POST uses multipart/formdata for the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFirmwareTest() throws ApiException {
        String collectionId = null;
        CreateFirmwareRequest body = null;
        Firmware response = api.createFirmware(collectionId, body);

        // TODO: test validations
    }
    
    /**
     * Delete firmware
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFirmwareTest() throws ApiException {
        String collectionId = null;
        String imageId = null;
        Firmware response = api.deleteFirmware(collectionId, imageId);

        // TODO: test validations
    }
    
    /**
     * Firmware usage
     *
     * Shows the firmware usage for devices in the collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void firmwareUsageTest() throws ApiException {
        String collectionId = null;
        String imageId = null;
        FirmwareUsageResponse response = api.firmwareUsage(collectionId, imageId);

        // TODO: test validations
    }
    
    /**
     * List firmware
     *
     * Lists available firmware images in collection
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFirmwareTest() throws ApiException {
        String collectionId = null;
        ListFirmwareResponse response = api.listFirmware(collectionId);

        // TODO: test validations
    }
    
    /**
     * Retrieve firmware
     *
     * Retrieve information on a firmware image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveFirmwareTest() throws ApiException {
        String collectionId = null;
        String imageId = null;
        Firmware response = api.retrieveFirmware(collectionId, imageId);

        // TODO: test validations
    }
    
    /**
     * Update firmware
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFirmwareTest() throws ApiException {
        String collectionId = null;
        String imageId = null;
        Firmware body = null;
        Firmware response = api.updateFirmware(collectionId, imageId, body);

        // TODO: test validations
    }
    
}
