/*
 * The Span API
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.1.3 factual-kahlil
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lab5e.span;

import com.lab5e.ApiException;
import com.lab5e.span.model.Device;
import com.lab5e.span.model.ListDataResponse;
import com.lab5e.span.model.ListDevicesResponse;
import com.lab5e.span.model.RuntimeError;
import com.lab5e.span.model.SendMessageRequest;
import com.lab5e.span.model.UpdateDeviceRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Ignore
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Create device
     *
     * Create a new device. This will add a device to the collection. You must have write access to the collection.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeviceTest() throws ApiException {
        String collectionId = null;
        Device body = null;
        Device response = api.createDevice(collectionId, body);

        // TODO: test validations
    }
    
    /**
     * Remove device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String collectionId = null;
        String deviceId = null;
        Device response = api.deleteDevice(collectionId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Get payloads
     *
     * List the data received from the device. Use the query parameters to control what data you retrieve.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDeviceDataTest() throws ApiException {
        String collectionId = null;
        String deviceId = null;
        Integer limit = null;
        String start = null;
        String end = null;
        String offset = null;
        ListDataResponse response = api.listDeviceData(collectionId, deviceId, limit, start, end, offset);

        // TODO: test validations
    }
    
    /**
     * List devices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String collectionId = null;
        ListDevicesResponse response = api.listDevices(collectionId);

        // TODO: test validations
    }
    
    /**
     * Retrieve device
     *
     * Retrieve a single device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveDeviceTest() throws ApiException {
        String collectionId = null;
        String deviceId = null;
        Device response = api.retrieveDevice(collectionId, deviceId);

        // TODO: test validations
    }
    
    /**
     * Send message
     *
     * Send a message to the device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        String collectionId = null;
        String deviceId = null;
        SendMessageRequest body = null;
        Object response = api.sendMessage(collectionId, deviceId, body);

        // TODO: test validations
    }
    
    /**
     * Update device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String existingCollectionId = null;
        String deviceId = null;
        UpdateDeviceRequest body = null;
        Device response = api.updateDevice(existingCollectionId, deviceId, body);

        // TODO: test validations
    }
    
}
